trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscriptionServiceConnectionName: jodowns VS
  terraformStateResourceGroupName: Deployment
  terraformStateStorageAccountName: jodownscsirodeploy
  terraformStateStorageContainerName: terraform
  terraformStateStorageBlobName: terraform.tfstate
  functionAppFolder: functions

steps:

- checkout: self

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: 'Install Terraform 0.12.9'
  inputs:
    terraformVersion: 0.12.9

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'terraform init'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    backendServiceArm: $(azureSubscriptionServiceConnectionName)
    backendAzureRmResourceGroupName: $(terraformStateResourceGroupName)
    backendAzureRmStorageAccountName: $(terraformStateStorageAccountName)
    backendAzureRmContainerName: $(terraformStateStorageContainerName)
    backendAzureRmKey: $(terraformStateStorageBlobName)

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'terraform apply'
  inputs:
    command: apply
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceNameAzureRM: $(azureSubscriptionServiceConnectionName)
    backendServiceArm: $(azureSubscriptionServiceConnectionName)
    backendAzureRmResourceGroupName: $(terraformStateResourceGroupName)
    backendAzureRmStorageAccountName: $(terraformStateStorageAccountName)
    backendAzureRmContainerName: $(terraformStateStorageContainerName)
    backendAzureRmKey: $(terraformStateStorageBlobName)

- powershell: |
   $jsonPath=(Get-ChildItem env:TERRAFORMTASK*_JSONOUTPUTVARIABLESPATH).Value
   Write-Host "Converting Terraform output from $jsonPath to Azure Pipelines variables."
   $json=Get-Content $jsonPath | ConvertFrom-Json
   $json | Get-Member -type NoteProperty | ForEach-Object {
        $o=$json."$($_.Name)"
        Write-Host "Creating variable $($_.Name)."
        "##vso[task.setvariable variable=$($_.Name)$(if ($o.sensitive -eq "True") {";issecret=true"})]$($o.value)"
    }
  displayName: 'Create Azure Pipelines Variables'

- script: |
   wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
   sudo dpkg -i packages-microsoft-prod.deb
   sudo apt-get update
   sudo apt-get install azure-functions-core-tools
  displayName: Install Azure Functions CLI

- task: AzureCLI@1
  displayName: Deploy Function App
  inputs:
    azureSubscription: $(azureSubscriptionServiceConnectionName)
    scriptLocation: inlineScript
    inlineScript: |
     cd $(functionAppFolder)
     func azure functionapp publish $(function_app_name) --python --build-native-deps
    workingDirectory: '$(System.DefaultWorkingDirectory)'
